const config = require('../config');
const moment = require('moment-timezone');
const { cmd, commands } = require('../command');
const { proto } = require('@whiskeysockets/baileys');

// Helper function to convert text to small caps
function toSmallCaps(str) {
  const smallCaps = {
    A: '·¥Ä', B: ' ô', C: '·¥Ñ', D: '·¥Ö', E: '·¥á', F: '“ì', G: '…¢', H: ' ú',
    I: '…™', J: '·¥ä', K: '·¥ã', L: ' ü', M: '·¥ç', N: '…¥', O: '·¥è', P: '·¥ò',
    Q: '«´', R: ' Ä', S: 's', T: '·¥õ', U: '·¥ú', V: '·¥†', W: '·¥°', X: 'x',
    Y: ' è', Z: '·¥¢'
  };
  return str.toUpperCase().split('').map(c => smallCaps[c] || c).join('');
}

// Helper function to get bot's uptime
function getUptime() {
  let sec = process.uptime();
  let h = Math.floor(sec / 3600);
  let m = Math.floor((sec % 3600) / 60);
  let s = Math.floor(sec % 60);
  return `${h}h ${m}m ${s}s`;
}

/**
 * Command: menu3
 * Description: Displays the main interactive menu with categories.
 */
cmd({
  pattern: "menu3",
  alias: ["list", "help"],
  use: '.menu3',
  desc: "Show bot command categories",
  category: "main",
  react: "‚ùÑÔ∏è",
  filename: __filename
},
async (dyby, mek, m, { from, reply }) => {
  try {
    // --- 1. Group all commands by category ---
    const category = {};
    for (let command of commands) {
      if (!command.category || command.dontAddCommandList) continue;
      if (!category[command.category]) {
        category[command.category] = [];
      }
      category[command.category].push(command);
    }
    const sortedCategories = Object.keys(category).sort();

    // --- 2. Create interactive rows for the list message ---
    const rows = sortedCategories.map(cat => ({
      title: `${cat.toUpperCase()} MENU`,
      description: `Click to see all commands in ${cat} category.`,
      // This rowId is crucial. It triggers the next command when a user clicks it.
      rowId: `${config.PREFIX}category_${cat}` 
    }));

    const sections = [{
      title: toSmallCaps('Bot Command Categories'),
      rows: rows
    }];

    // --- 3. Construct the main menu message ---
    const headerText = `
*‚ï≠‚ïê‚ïê„Äò ùêíùêÄùêäùêéùêçùêÄùüè-ùêåùêÉ „Äô*
*‚îÉ‚ùç* *·¥ús·¥á Ä* : @${m.sender.split("@")[0]}
*‚îÉ‚ùç* * Ä·¥ú…¥·¥õ…™·¥ç·¥á* : ${getUptime()}
*‚îÉ‚ùç* *·¥ç·¥è·¥Ö·¥á* : *${config.MODE}*
*‚îÉ‚ùç* *·¥ò Ä·¥á“ì…™x* : [ ${config.PREFIX} ]
*‚îÉ‚ùç* *·¥© ü·¥ú…¢…™…¥* :  ${commands.length}
*‚îÉ‚ùç* *·¥Ö·¥á·¥†* : *ùêêùêöùêùùêûùêûùê´ ùêäùê°ùêöùêß*
*‚îÉ‚ùç* *·¥†·¥á Äs…™·¥è…¥s* : *4.0.0*
*‚ï∞‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ä∑*

Hello! I am Sakona, a Multi-Device WhatsApp bot. Choose a category from the list below to see its commands.
`;

    const listMessage = {
      text: headerText,
      footer: `\n> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è «´·¥Ä·¥Ö·¥á·¥á Ä ·¥ã ú·¥Ä…¥`,
      buttonText: 'CLICK HERE TO SEE COMMANDS',
      sections: sections,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
      }
    };
    
    // --- 4. Send the interactive list message ---
    await dyby.sendMessage(from, listMessage, { quoted: mek });

  } catch (e) {
    console.error(e);
    reply(`‚ùå Error: ${e.message}`);
  }
});


/**
 * Command: category
 * Description: This is a hidden command triggered by the main menu list.
 * It displays the commands for the selected category.
 */
cmd({
  pattern: "category_(.*)", // This regex captures the category name
  dontAddCommandList: true, // Hides this command from the main menu
  filename: __filename
},
async (dyby, mek, m, { from, reply, match }) => {
  try {
    const selectedCategory = match[1]; // e.g., "download", "search"

    // --- 1. Group commands again to find the right ones ---
    const category = {};
    for (let command of commands) {
      if (!command.category) continue;
      if (!category[command.category]) {
        category[command.category] = [];
      }
      category[command.category].push(command);
    }

    // --- 2. Check if the selected category is valid ---
    if (!category[selectedCategory]) {
      return reply(`Invalid category: ${selectedCategory}`);
    }

    // --- 3. Build the text for the selected category's commands ---
    let categoryMenuText = `‚îå‚îÄ‚îÄ „Äé *${selectedCategory.toUpperCase()} MENU* „Äè\n`;
    const cmds = category[selectedCategory]
      .filter(c => c.pattern)
      .sort((a, b) => a.pattern.localeCompare(b.pattern));

    cmds.forEach((cmd) => {
      const usage = cmd.pattern.split('|')[0];
      categoryMenuText += `\n‚îú‚ùÉ ${config.PREFIX}${toSmallCaps(usage)}`;
    });
    
    categoryMenuText += `\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ùÉ\n\n> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è «´·¥Ä·¥Ö·¥á·¥á Ä ·¥ã ú·¥Ä…¥`;

    // --- 4. Send the list of commands with an image ---
    await dyby.sendMessage(from, {
      image: { url: config.MENU_IMAGE_URL },
      caption: categoryMenuText,
      contextInfo: {
        mentionedJid: [m.sender],
      }
    }, { quoted: mek });

  } catch (e) {
    console.error(e);
    reply(`‚ùå Error fetching category commands: ${e.message}`);
  }
});
